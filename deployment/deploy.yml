---
- hosts: all
  tasks:
    ######################################################
    # Configure SSH keys
    ######################################################
    - name: copy hosts private key
      copy: src=insecure_key dest=/root/.ssh/id_rsa force=yes mode=0600
    - name: copy containers private key
      copy: src=container_key dest=/root/.ssh/container_key force=yes mode=0600
    - name: copy insecure key pub to authorized key
      authorized_key: user=root key={{ lookup('file', 'insecure_key.pub') }}
    - name: Configure SSH hosts config
      template: src=template/ssh_config.j2 dest=~/.ssh/config

    ######################################################
    # Configure APT repositories
    ######################################################
    - name: Configure apt repository
      apt_repository: repo={{ item.name }} state=present
      with_items:
        - name: "deb http://us.archive.ubuntu.com/ubuntu/ trusty universe"
        - name: "deb http://us.archive.ubuntu.com/ubuntu/ trusty multiverse"
    - name: Add docker keyserver
      command: apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
    - name: Add docker repository to apt
      shell: sh -c "echo 'deb https://apt.dockerproject.org/repo ubuntu-$(lsb_release -sc) main' | cat > /etc/apt/sources.list.d/docker.list"
    - name: update apt cache
      apt: update_cache=yes


    ######################################################
    # Update kernel and restart if necessary
    ######################################################
    - name: Update kernel
      apt: name=linux-image-generic-lts-vivid
      register: kernel_install

    - name: restart machine
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
      become: true
      when: kernel_install.changed

    - name: waiting for server to come back
      local_action: wait_for host={{ inventory_hostname }} port=22 state=started delay=5 timeout=100
      become: false
      when: kernel_install.changed


    ######################################################
    # Install softwares
    ######################################################
    - name: install needed software
      apt: name={{ item.name }} state=latest
      with_items:
        - name: python
        - name: openmpi-bin
        - name: sshfs
        - name: docker-engine
    - name: Create shared folder
      file: path=/shared state=directory

    ######################################################
    # Update /etc/hosts file
    ######################################################
    # From https://gist.github.com/rothgar/8793800
    - name: Generate /etc/hosts file
      template: src=template/hosts.j2 dest=/etc/hosts


- hosts: hemelb-master
  tasks:
    ######################################################
    # Prepare the necessary files
    ######################################################
    - name: Copy HemeLB test files
      copy: src={{ item.name }} dest=/shared/{{ item.name }} force=no
      with_items:
        - name: input.xml
        - name: 990_Example2-skeleton_corrected_tubed_smoothed.gmy


    ######################################################
    # Configure consul service for container network management
    ######################################################
    - name: Run consul docker container
      command: docker run -d -p "8500:8500" -h "consul" progrium/consul -server -bootstrap
      ignore_errors: true
    - name: Check consul is running
      command: docker ps -q
      register: consul_result
      failed_when: "consul_result.stdout == ''"



- hosts: hemelb-cores
  vars:
    master_ip: "{{ hostvars[groups['hemelb-master'][0]]['ansible_eth0']['ipv4']['address'] }}"
  tasks:

    ######################################################
    # Configure docker daemon on each node to point to
    # consul service on manager node
    ######################################################
    - name: Configure docker daemon options
      template: src=template/docker.conf.j2 dest=/etc/default/docker
      register: docker_configuration_result
    - name: restart docker
      service: name=docker state=restarted
      when: docker_configuration_result.changed
    - name: Create hemelb network overlay for containers
      command: docker network create -d overlay hemelb-overlay
      ignore_errors: true
    - name: Check if network overlay is created
      command: docker network ls
      register: docker_network_result
      failed_when: "'hemelb-overlay' not in docker_network_result.stdout"



    ######################################################
    # Configure each node to mount the SSHFS volume
    ######################################################
    - name: Mount sshfs
      shell: sshfs -o allow_other -o reconnect root@{{ master_ip }}:/shared /shared
      ignore_errors: true


    ######################################################
    # Run HemeLB container on each node
    ######################################################
    - name: Pull HemeLB core image
      command: docker pull seiryuz/hemelb-core:0.0.1
    - name: Check running docker container
      command: docker ps -q
      register: docker_result
    - name: Stop running docker container
      command: docker stop {{ docker_result.stdout }}
      when: docker_result.stdout != ""
    - name: Run HemeLB core container
      command: docker run -p 24:22 -d --net=hemelb-overlay -v /shared:/shared -v /root/.ssh/config:/root/.ssh/config -v /root/.ssh/container_key:/root/.ssh/container_key seiryuz/hemelb-core:0.0.1




    #- name: Prepare sources folder
      #file: path=/sources state=directory
    #- name: Clone hemelb
      #git: repo=https://github.com/UCL/hemelb.git dest=/sources/hemelb
    #- name: Create hemelb build folder
      #file: path=/sources/hemelb/build state=directory
    #- name: Cmake
      #command: cmake -DHEMELB_STEERING_LIB=none -DHEMELB_USE_SSE3=ON ../
      #args:
        #chdir: /sources/hemelb/build
    #- name: make
      #command: make
      #args:
        #chdir: /sources/hemelb/build

    #- name: Get master keyscan for ssh/known_hosts
      #shell: ssh-keyscan {{ master_ip }}
      #register: ssh_key_master
    #- name: Add master to ssh/known_hosts
      #known_hosts: path="~/.ssh/known_hosts"
                   #name="{{ master_ip }}"
                   #key="{{ ssh_key_master.stdout }}"

    # TODO: we need something to create user with appropriate permission
    #- name: Create appropriate user
      #user: name=hemelb comment="HemeLB user" state=present
      #
      #
    #- name: Prepare sources folder
      #file: path=/sources state=directory
    #- name: Clone hemelb
      #git: repo=https://github.com/UCL/hemelb.git dest=/sources/hemelb
    #- name: Create hemelb build folder
      #file: path=/sources/hemelb/build state=directory
    #- name: Cmake
      #command: cmake -DHEMELB_STEERING_LIB=none -DHEMELB_USE_SSE3=ON ../
      #args:
        #chdir: /sources/hemelb/build
    #- name: make
      #command: make
      #args:
        #chdir: /sources/hemelb/build

#- host: all
  #tasks:
# We need something to distribute the ssh keys of the master core
#- hosts: hemelb-master
  #tasks:
    #- name: copy private key
      #copy src=/Users/steven/.ssh/id_rsa dest=/root/.ssh/id_rsa force=no

---
- hosts: all
  tasks:


    ######################################################
    # Configure SSH keys
    ######################################################
    - name: Copy hosts private key
      copy: src=keys/insecure_key dest=/root/.ssh/id_rsa force=yes mode=0600

    - name: Copy containers private key
      copy: src=keys/container_key dest=/root/.ssh/container_key force=yes mode=0600

    - name: Copy insecure key pub to authorized key
      authorized_key: user=root key={{ lookup('file', 'keys/insecure_key.pub') }}

    - name: Configure SSH hosts config
      template: src=template/ssh_config.j2 dest=~/.ssh/config


    ######################################################
    # Configure APT repositories
    ######################################################
    - name: Configure apt repository
      apt_repository: repo={{ item.name }} state=present
      with_items:
        - name: "deb http://us.archive.ubuntu.com/ubuntu/ trusty universe"
        - name: "deb http://us.archive.ubuntu.com/ubuntu/ trusty multiverse"

    - name: Add docker keyserver
      command: apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D

    - name: Add docker repository to apt
      shell: sh -c "echo 'deb https://apt.dockerproject.org/repo ubuntu-$(lsb_release -sc) main' | cat > /etc/apt/sources.list.d/docker.list"

    - name: Update apt cache
      apt: update_cache=yes


    ######################################################
    # Update kernel and restart if necessary
    ######################################################
    - name: Update kernel
      apt: name=linux-image-generic-lts-vivid
      register: kernel_install

    - name: Restart all nodes
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
      become: true
      when: kernel_install.changed

    - name: Waiting for all nodes to come back
      local_action: wait_for host={{ inventory_hostname }} port=22 state=started delay=5 timeout=300
      become: false
      when: kernel_install.changed


    ######################################################
    # Install softwares
    ######################################################
    - name: Install needed software
      apt: name={{ item.name }} state=latest
      with_items:
        - name: python
        - name: openmpi-bin
        - name: docker-engine

    - name: Upgrade packages
      apt: upgrade=yes

    - name: Create shared folder
      file: path=/shared state=directory


    ######################################################
    # Update /etc/hosts file
    ######################################################
    # From https://gist.github.com/rothgar/8793800
    - name: Generate /etc/hosts file
      template: src=template/hosts.j2 dest=/etc/hosts



- hosts: hemelb-master
  tasks:


    ######################################################
    # Prepare shared directory
    ######################################################
    - name: Install NFS Server
      apt: name=nfs-kernel-server state=latest

    - name: Configure NFS server to accept mount from our nodes
      template: src=template/exports.j2 dest=/etc/exports force=yes
      register: nfs_configuration

    - name: Export NFS Table
      command: exportfs -a
      when: nfs_configuration.changed

    - name: Restart NFS server
      service: name=nfs-kernel-server state=restarted
      when: nfs_configuration.changed


    ######################################################
    # Prepare HemeLB files to run
    ######################################################
    - name: Copy HemeLB test files
      copy: src=test_data/{{ item.name }} dest=/shared/{{ item.name }} force=no
      with_items:
        - name: input.xml
        - name: 990_Example2-skeleton_corrected_tubed_smoothed.gmy


    ######################################################
    # Configure consul service for container network management
    ######################################################
    - name: Run consul docker container
      command: docker run -d -p "8500:8500" -h "consul" progrium/consul -server -bootstrap
      ignore_errors: true

    - name: Check consul is running
      command: docker ps -q
      register: consul_result
      failed_when: "consul_result.stdout == ''"



- hosts: hemelb-cores
  vars:
    master_ip: "{{ hostvars[groups['hemelb-master'][0]]['ansible_eth1']['ipv4']['address'] }}"
  tasks:


    ######################################################
    # Configure docker daemon on each node to point to
    # consul service on manager node
    ######################################################
    - name: Configure docker daemon options
      template: src=template/docker.conf.j2 dest=/etc/default/docker
      register: docker_configuration

    - name: Restart docker
      service: name=docker state=restarted
      when: docker_configuration.changed

    - name: Create hemelb network overlay for containers
      command: docker network create -d overlay hemelb-overlay
      ignore_errors: true

    - name: Check if network overlay is created
      command: docker network ls
      register: docker_network_result
      failed_when: "'hemelb-overlay' not in docker_network_result.stdout"


    ######################################################
    # Configure each node to mount the NFS volume
    ######################################################
    - name: Install NFS client
      apt: name=nfs-common state=latest

    - name: Mount NFS for shared volume
      mount: name=/shared src={{ master_ip }}:/shared fstype=nfs state=mounted
      ignore_errors: true


    ######################################################
    # Run HemeLB container on each node
    ######################################################
    - name: Pull HemeLB core image
      command: docker pull seiryuz/hemelb-core:0.0.1

    - name: Check running docker container
      command: docker ps -q
      register: docker_result

    - name: Stop running docker container
      command: docker stop {{ docker_result.stdout }}
      when: docker_result.stdout != ""

    - name: Run HemeLB core container
      command: docker run -p 24:22 -d --net=hemelb-overlay -v /shared:/shared -v /root/.ssh/config:/root/.ssh/config -v /root/.ssh/container_key:/root/.ssh/container_key seiryuz/hemelb-core:0.0.1

